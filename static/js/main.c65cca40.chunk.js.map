{"version":3,"sources":["components/bingoHeader.js","components/noticeHeader.js","components/bingoFooter.js","App.js","serviceWorker.js","index.js"],"names":["bingoHeader","Grid","container","justify","alignItems","Typography","variant","gutterBottom","noticeHeader","bingoFooter","itemList","BingoItem","styled","Card","display","justifyContent","textAlign","width","height","background","color","CompletedItem","App","props","markComplete","e","id","target","setState","markUnComplete","bingoSetup","state","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","itemIndex","bingoItemsList","bingoItems","i","push","Math","floor","random","length","splice","console","log","row","renderRow","rowOne","slice","rowTwo","rowThree","rowFour","rowFive","alignContent","spacing","map","item","xs","CardContent","onClick","this","bingoRow","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c65cca40.chunk.js","sourcesContent":["import React from \"react\";\nimport { Typography, Grid} from '@material-ui/core';\n\nfunction bingoHeader () {\n    return (\n        <Grid container justify=\"center\" alignItems=\"center\">\n        <Typography variant='h3' gutterBottom>\n          Nat 19 Bingo\n      </Typography>\n      </Grid>\n\n    )\n}\n\nexport default bingoHeader;","import React from \"react\";\nimport { Typography, Grid} from '@material-ui/core';\n\nfunction noticeHeader () {\n    return (\n        <Grid container justify=\"center\" alignItems=\"center\">\n        <Typography gutterBottom>\n          A reminder to the players/gm: please do not do things to purposefully gain bingo sqaures.\n      </Typography>\n      </Grid>\n\n    )\n}\n\nexport default noticeHeader;","import React from \"react\";\nimport { Typography, Grid} from '@material-ui/core';\n\nfunction bingoFooter () {\n    return (\n        <Grid container justify=\"center\" alignItems=\"center\">\n        <Typography gutterBottom>\n          Thanks to SpacePegasus for inspiring this idea\n      </Typography>\n      </Grid>\n\n    )\n}\n\nexport default bingoFooter;","import React from 'react';\nimport './App.css';\nimport { Typography, Card, Grid, CardContent} from '@material-ui/core';\nimport bingoItems from './vestigeBingo.json';\nimport { styled } from '@material-ui/core/styles';\nimport BingoHeader from './components/bingoHeader';\nimport NoticeHeader from './components/noticeHeader';\nimport BingoFooter from './components/bingoFooter';\n\n\nvar itemList=[]\nconst BingoItem = styled(Card)({\n  display: \"flex\",\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n  width: \"150px\",\n  height: \"150px\",\n  background: 'linear-gradient(135deg, #330665 40%, #D00117 90%)',\n  color: 'white'\n})\n\n\n\nconst CompletedItem = styled(Card)({\n  display: \"flex\",\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n  width: \"150px\",\n  height: \"150px\",\n  background: 'linear-gradient(45deg, #1e824c 30%, #4ecdc4 90%)',\n  color: 'white'\n})\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.bingoSetup()\n    this.state = {\n      0: false,\n      1: false,\n      2: false,\n      3: false,\n      4: false,\n      5: false,\n      6: false,\n      7: false,\n      8: false,\n      9: false,\n      10: false,\n      11: false,\n      12: false,\n      13: false,\n      14: false,\n      15: false,\n      16: false,\n      17: false,\n      18: false,\n      19: false,\n      20: false,\n      21: false,\n      22: false,\n      23: false,\n      24: false\n    };\n    \n  }\n  \n  markComplete = e => {\n    const id = e.target.id;\n    this.setState({[id]: true})\n    \n  }\n\n  bingoSetup(){\n    let bingoItemsList=bingoItems;\n    let itemIndex;\n    for (var i=0;i<25;i++){\n      // console.log(i+\" is i\")\n      if(i===12){\n        // console.log(\"huh\")\n        itemList.push(\n          {\"id\": 0,\n          \"item\": \"PENIS \\n (Free Space)\"\n        })\n      }\n      else{\n  \n        itemIndex=Math.floor(Math.random()*bingoItemsList.length);\n        /* console.log(\"list length: \" + bingoItemsList.length)\n        console.log(\"item index: \" + itemIndex)\n        console.log(itemIndex) */\n        itemList.push(bingoItemsList[itemIndex]);\n        bingoItemsList.splice(itemIndex,1);\n      }\n    }\n    console.log(itemList)\n  }\n  \n  markUnComplete = e => {\n    const id = e.target.id;\n    this.setState({[id]: false})\n    \n  }\n  \n  bingoRow(row) {\n    let rowOne = itemList.slice(0, 5);\n    let rowTwo = itemList.slice(5, 10);\n    let rowThree = itemList.slice(10, 15);\n    let rowFour = itemList.slice(15, 20);\n    let rowFive = itemList.slice(20,25);\n    let renderRow;\n    switch (row) {\n      case 1:\n      renderRow = rowOne;\n      break;\n      case 2:\n      renderRow = rowTwo;\n      break;\n      case 3:\n      renderRow = rowThree;\n      break;\n      case 4:\n      renderRow = rowFour;\n      break;\n      case 5:\n      renderRow = rowFive;\n      break;\n      default:\n      renderRow = rowOne;\n    }\n    return (\n      <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" spacing={0}>\n      {renderRow.map(item => {\n        const id = item.id;\n        if (this.state[id] === true) {\n          return (\n            <Grid item xs={0} key={item.id}>\n            <CompletedItem id={id}>\n            <CardContent id={item.id} onClick={this.markUnComplete}>\n            <Typography id={item.id} onClick={this.markUnComplete} gutterBottom>\n            {item.item}</Typography>\n            </CardContent>\n            </CompletedItem>\n            </Grid>\n            )\n          }\n          else {\n            return (\n              <Grid item xs={0} key={item.id}>\n              <BingoItem > \n              <CardContent id={item.id} onClick={this.markComplete}>\n              <Typography  id={item.id} onClick={this.markComplete} gutterBottom>\n              {item.item}</Typography>\n              </CardContent>\n              </BingoItem>\n              </Grid> \n              )\n            }\n          })\n        }\n        </Grid>\n        )\n      }\n      \n      render() {\n        return (\n          <>\n          <BingoHeader />\n          <NoticeHeader/>\n          {this.bingoRow(1)}\n          {this.bingoRow(2)}\n          {this.bingoRow(3)}\n          {this.bingoRow(4)}\n          {this.bingoRow(5)}\n          <BingoFooter />\n          </>\n          )};\n        }\n        \n        export default App;\n        ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}